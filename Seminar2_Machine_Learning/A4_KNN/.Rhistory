apply(fish_std[,-1], 2, FUN = z_score))))
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
z_score <- function(x) {
return((x - mean(x)) / sd(x))
}
fish_std <- tibble(data.frame(cbind(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score))))
fish_std
p1 <- ggpairs(fish_std)
## pairs plot add-on for ggplot
library(ggpairs)
## pairs plot add-on for ggplot
library(GGally)
install.packages("GGally")
## pairs plot add-on for ggplot
library(GGally)
p1 <- ggpairs(fish_std)
p1
p1 <- ggpairs(fish_std[,-1], aes(color = std_name))
p1
?ggpairs
p1 <- ggpairs(fish_std, aes(color = std_name))
p1
## 3D plots
library(plotly)
str(fish_std)
p1 <- plotly(fish_std,
x = ~width_cm,
y = ~height_cm,
z = ~weight_g,
color = ~std_name) |>
add_markers() |>
layout(scene = list(xaxis = list(title = "Width"),
yaxis = list(title = "Height"),
zaxis = list(title = "Weight")))
p1 <- plot_ly(fish_std,
x = ~width_cm,
y = ~height_cm,
z = ~weight_g,
color = ~std_name) |>
add_markers() |>
layout(scene = list(xaxis = list(title = "Width"),
yaxis = list(title = "Height"),
zaxis = list(title = "Weight")))
p1
?layout
p1 <- plot_ly(fish_std,
x = ~width_cm,
y = ~height_cm,
z = ~weight_g,
color = ~std_name) |>
add_markers() |>
layout(scene = list(xaxis = list(title = "Width"),
yaxis = list(title = "Height"),
zaxis = list(title = "Weight"))) |>
fig.update_traces(marker={'size': 15})
p1 <- plot_ly(fish_std,
x = ~width_cm,
y = ~height_cm,
z = ~weight_g,
color = ~std_name,
size = 4) |>
add_markers() |>
layout(scene = list(xaxis = list(title = "Width"),
yaxis = list(title = "Height"),
zaxis = list(title = "Weight")))
p1
## class for classification functions
library(class)
str(fish_std)
?slice_sample
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_train
unique(fish_train$std_name)
fish_std[!fish_train,]
filter(fish_std, != fish_train)
seq(nrow(fish_std)
)
fish_std |>
add_column(id = seq(nrow(fish_std)))
fish_train <- fish_std |>
add_column(id = seq(nrow(fish_std)))
fish_train
str(fish_train)
fish_train <- fish_std |>
add_column(id = seq(nrow(fish_std)))
fish_train <- fish_std |>
add_column(id = seq(nrow(fish_std))) |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_train
fish_train$id
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
z_score <- function(x) {
return((x - mean(x)) / sd(x))
}
fish_std <- tibble(data.frame(cbind(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
seq(nrow(fish_std)))))
fish_train <- fish_std |>
add_column(id = seq(nrow(fish_std))) |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
str(fish_train)
head(fish_std)
fish_std <- tibble(data.frame(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
id = seq(nrow(fish_std))))
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
z_score <- function(x) {
return((x - mean(x)) / sd(x))
}
fish_std <- tibble(data.frame(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
id = seq(nrow(fish_std))))
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
filter(fish_std, id %in% fish_train$id)
filter(fish_std, id !%in% fish_train$id)
filter(fish_std, id %!in% fish_train$id)
filter(fish_std, !(id %in% fish_train$id))
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
k1
fish_knn <- knn(train = fish_train,
test = fish_test,
k = k1)
fish_knn <- knn(train = fish_train,
test = fish_test,
cl = fish_train$std_name,
k = k1)
fish_train$std_name
fish_knn <- knn(train = fish_train,
test = fish_test,
cl = unique(fish_train$std_name),
k = k1)
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
fish_std <- tibble(data.frame(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
id = seq(nrow(fish_std)))) |>
mutate(std_name = as.factor(std_name))
fish_std
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(train = fish_train,
test = fish_test,
cl = fish_train$std_name,
k = k1)
?knn
fish_knn <- knn(train = fish_train,
test = fish_test,
cl = fish_train[,1],
k = k1)
fish_train[,1]
fish_train
fish_knn <- knn(train = fish_train,
test = fish_test,
cl = fish_train[,1],
k = k1)
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(train = fish_train,
test = fish_test,
cl = fish_train[,1],
k = k1)
fish_knn <- knn(train = fish_train,
test = fish_test,
cl = std_name,
k = k1)
fish_knn <- knn(train = fish_train[,-1],
test = fish_test,
cl = fish_train[,1],
k = k1)
fish_train[,-1]
fish_train[,1]
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
z_score <- function(x) {
return((x - mean(x)) / sd(x))
}
fish_std <- tibble(data.frame(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
id = seq(nrow(fish_std))))
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(train = fish_train[,-1],
test = fish_test,
cl = fish_train[,1],
k = k1)
fish_test[,-c(1,9)]
fish_train[,-c(1,10)]
fish_knn <- knn(train = fish_train[,-c(1,10)],
test = fish_test[,-c(1,10)],
cl = fish_train[,1],
k = k1)
fish_train[,1]
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
z_score <- function(x) {
return((x - mean(x)) / sd(x))
}
fish_std <- (data.frame(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
id = seq(nrow(fish_std))))
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(train = fish_train[,-c(1,10)],
test = fish_test[,-c(1,10)],
cl = fish_train[,1],
k = k1)
fish_train[,-c(1,10)]
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
z_score <- function(x) {
return((x - mean(x)) / sd(x))
}
fish_std <- (data.frame(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
id = seq(nrow(fish_std))))
fish_std
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_train
fish_train[,1]
k1
fish_knn <- knn(train = fish_train[,-c(1,10)],
test = fish_test[,-c(1,10)],
cl = fish_test[,1],
k = k1)
fish_knn <- knn(test = fish_test[,-c(1,10)],
train = fish_train[,-c(1,10)],
cl = fish_test[,1],
k = k1)
fish_knn <- knn(test = fish_test[,-c(1,10)],
train = fish_train[,-c(1,10)],
cl = fish_train[,1],
k = k1)
fish_std <- fish |>
# remove columns we don't need
select(!common_name & !sex) |>
# remove NAs
drop_na()
z_score <- function(x) {
return((x - mean(x)) / sd(x))
}
fish_std <- tibble(data.frame(fish_std[,1],
apply(fish_std[,-1], 2, FUN = z_score),
id = seq(nrow(fish_std)))) |>
mutate(std_name = as.factor(std_name))
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.75)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(test = fish_test[,-c(1,10)],
train = fish_train[,-c(1,10)],
cl = fish_train[,1],
k = k1)
fish_knn <- knn(test = fish_test[,-c(1,10)],
train = fish_train[,-c(1,10)],
cl = fish_train[,1],
k = 3)
nrow(fish_train[,-c(1,10)])
nrow(fish_train)
fish_knn <- knn(test = fish_test[,-c(1:4,10)],
train = fish_train[,-c(1:4,10)],
cl = fish_train[,1],
k = 3)
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train[,1],
k = 3)
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = 3)
fish_knn
table(fish_knn)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = 3)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = 11)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = 11)
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = k1)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
?confusionMatrix
cm$overall
cm$overall$Kappa
cm$overall[2]
# create a function to produce the stats of interest
fish_knn_fxn <- function(x) {
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = k1)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
return(cm[1:2])
}
fish_knn_fxn(fish_std)
# create a function to produce the stats of interest
fish_knn_fxn <- function(x) {
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
fish_test <- filter(fish_std, !(id %in% fish_train$id))
k1 <- round(sqrt(nrow(fish_train)))
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = k1)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
return(cm$overall[1:2])
}
fish_knn_fxn(fish_std)
# establish loop to repeat function multiple times
n <- 10
fish_knn_df <- matrix(nrow = n, ncol = 2)
seq(n)
# establish loop to repeat function multiple times
n <- 10
fish_knn_df <- matrix(nrow = n, ncol = 2)
for(i in seq(n)) {
fish_knn_df[i,] <- fish_knn_fxn(fish_std)
}
fish_knn_df
# establish loop to repeat function multiple times
n <- 10
fish_knn_df <- matrix(nrow = n, ncol = 2)
for(i in seq(n)) {
fish_knn_df[i,] <- fish_knn_fxn(fish_std)
}
fish_knn_df
fish_cv <- data.frame(k = c(mean(fish_knn_df[,1]), sd(fish_knn_df[,1])),
acc = c(mean(fish_knn_df[,2]), sd(fish_knn_df[,2])))
fish_cv
row.names(fish_cv) <- c("mean", "sd")
fish_cv
# establish loop to repeat function multiple times
n <- 100
fish_knn_df <- matrix(nrow = n, ncol = 2)
for(i in seq(n)) {
fish_knn_df[i,] <- fish_knn_fxn(fish_std)
}
fish_knn_df
fish_cv <- data.frame(k = c(mean(fish_knn_df[,1]), sd(fish_knn_df[,1])),
acc = c(mean(fish_knn_df[,2]), sd(fish_knn_df[,2])))
row.names(fish_cv) <- c("mean", "sd")
fish_cv
set.seed(23)
# sample random rows from each species
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
# pull non-sampled rows for test dataset
fish_test <- filter(fish_std, !(id %in% fish_train$id))
# determine initial k value
k1 <- round(sqrt(nrow(fish_train)))
# run kNN
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = k1)
# create confusion matrix (caret package)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
set.seed(37)
# sample random rows from each species
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
# pull non-sampled rows for test dataset
fish_test <- filter(fish_std, !(id %in% fish_train$id))
# determine initial k value
k1 <- round(sqrt(nrow(fish_train)))
# run kNN
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = k1)
# create confusion matrix (caret package)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
set.seed(42)
# sample random rows from each species
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
# pull non-sampled rows for test dataset
fish_test <- filter(fish_std, !(id %in% fish_train$id))
# determine initial k value
k1 <- round(sqrt(nrow(fish_train)))
# run kNN
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = k1)
# create confusion matrix (caret package)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
set.seed(4242)
# sample random rows from each species
fish_train <- fish_std |>
group_by(std_name) |>
slice_sample(prop = 0.67)
# pull non-sampled rows for test dataset
fish_test <- filter(fish_std, !(id %in% fish_train$id))
# determine initial k value
k1 <- round(sqrt(nrow(fish_train)))
# run kNN
fish_knn <- knn(test = fish_test[,-c(1,10), drop = FALSE],
train = fish_train[,-c(1,10), drop = FALSE],
cl = fish_train$std_name,
k = k1)
# create confusion matrix (caret package)
cm <- confusionMatrix(data = fish_knn, reference = fish_test$std_name)
cm
data.frame(fish_std,
dummy_size = rep(10, times = nrow(fish_std)))
p1 <- plot_ly(data.frame(fish_std,
dummy_size = rep(10, times = nrow(fish_std))),
x = ~width_cm,
y = ~height_cm,
z = ~weight_g,
color = ~std_name,
size = dummy_size) |>
add_markers() |>
layout(scene = list(xaxis = list(title = "Width"),
yaxis = list(title = "Height"),
zaxis = list(title = "Weight")))
?plot_ly
p1 <- plot_ly(fish_std),
