library(tidyverse)
library(caret)
solar <- readRDS("solarPrediction.rds")
head(solar)
# summarize variables by day with means, minima, maxima, and sd
solarDay <- solar |>
group_by(Date = date(DateTime)) |>
summarise(kWh_m2 = sum(Radiation * 60 * 5) * 2.77778e-7,
avgTemperature = mean(Temperature),
minTemperature = min(Temperature),
maxTemperature = max(Temperature),
sdTemperature = sd(Temperature),
rangeTemperature = maxTemperature - minTemperature,
avgPressure = mean(Pressure),
minPressure = min(Pressure),
maxPressure = max(Pressure),
sdPressure = sd(Pressure),
rangeTemperature = maxPressure - minPressure,
avgHumidity = mean(Humidity),
minHumidity = min(Humidity),
maxHumidity = max(Humidity),
sdPHumidity = sd(Humidity),
rangeHumidity = maxHumidity - minHumidity,
avgSpeed = mean(Speed),
minSpeed = min(Speed),
maxSpeed = max(Speed),
sdPSpeed = sd(Speed),
rangeSpeed = maxSpeed - minSpeed,
dayLengthHrs = as.numeric(((max(TimeSunSet) -
min(TimeSunRise)) / 60 / 60)))
head(solarDay)
# summarize variables by day with means, minima, maxima, and sd
solarDay <- solar |>
group_by(Date = date(DateTime)) |>
summarise(kWh_m2 = sum(Radiation * 60 * 5) * 2.77778e-7,
avgTemperature = mean(Temperature),
minTemperature = min(Temperature),
maxTemperature = max(Temperature),
sdTemperature = sd(Temperature),
rangeTemperature = maxTemperature - minTemperature,
avgPressure = mean(Pressure),
minPressure = min(Pressure),
maxPressure = max(Pressure),
sdPressure = sd(Pressure),
rangeTemperature = maxPressure - minPressure,
avgHumidity = mean(Humidity),
minHumidity = min(Humidity),
maxHumidity = max(Humidity),
sdPHumidity = sd(Humidity),
rangeHumidity = maxHumidity - minHumidity,
avgSpeed = mean(Speed),
minSpeed = min(Speed),
maxSpeed = max(Speed),
sdPSpeed = sd(Speed),
rangeSpeed = maxSpeed - minSpeed,
dayLengthHrs = as.numeric(((max(TimeSunSet) -
min(TimeSunRise)) / 60 / 60))) |>
select(-Date)
head(solarDay)
library(scales)
solarRescale <- solarDay |>
mutate(across(everything), rescale)
solarRescale <- solarDay |>
mutate(across(everything(), rescale))
solarRescale
?train
names(getModelInfo())
?getModelInfo
getModelInfo(method = "brnn")
modelLookup(method = "brnn")
modelLookup(model = brnn)
modelLookup(model = "neuralnet")
modelLookup(model = "dnn")
modelLookup(model = "brnn")
foo <- train(solarRescale, method = "neuralnet")
foo <- train(solarRescale, method = "neuralnet", formula = kWh_m2~.)
solarRescale
foo <- train(solarRescale, y = solarRescale$kWh_m2, method = "neuralnet")
foo <- train(solarRescale, y = solarRescale$kWh_m2, method = "neuralnet")
warnings()
foo <- train(data.frame(solarRescale), y = solarRescale$kWh_m2, method = "neuralnet")
foo
solarRescale
foo <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet")
foo
modelLookup(model = "neuralnet")
fooTuningGrid <- expand.grid(layer1 = 5, layer2 = 1, layer3 = 1)
fooTuningGrid
foo <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet",
tuneGrid = fooTuningGrid)
foo
fooTuningGrid <- expand.grid(layer1 = c(1,3,5), layer2 = 1, layer3 = 1)
foo <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet",
tuneGrid = fooTuningGrid)
foo
foo$results
foo$bestTune
fooTuningGrid <- expand.grid(layer1 = 1:3, layer2 = 1:3, layer3 = 1:3)
foo <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet",
tuneGrid = fooTuningGrid)
foo
foo$bestTune
?rescale
y <- (x * (maxim - minim) + minim)
unscale <- function(x, maxim, minim) {
y <- (x * (maxim - minim) + minim)
}
unscale(x = foo$results[21,6], maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
unscale <- function(x, maxim, minim) {
y <- (x * (maxim - minim) + minim)
return(y)
}
unscale(x = foo$results[21,6], maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
unscale(x = solarRescale$kWh_m2, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
unscale(x = solarRescale$kWh_m2, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2)) - solarDay$kWh_m2
modelLookup(model = "elm")
getModelInfo(method = "elm")
foo$results$RMSE
range(solar$DateTime)
solar
solarDay
modelLookup(model = "neuralnet")
solar_nn1 <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet")
solar_nn1
solar_nn1 <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet")
solar_nn1
?train
solar_TuneGrid <- expand.grid(layer1 = c(1,3,5), layer2 = 0:2, layer3 = 0:2)
set.seed(2337)
solar_TuneGrid <- expand.grid(layer1 = c(1,3,5), layer2 = 0:2, layer3 = 0:2)
solar_nn2 <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet",
tuneGrid = solar_TuneGrid)
solar_nn2
solar_nn2$bestTune
rownames(solar_nn2$bestTune)
which(solar_nn2$bestTune)
solar_TuneGrid
solar_nn2$results[27,]
solar_nn2$results$MAE[27]
unscale(x = solar_nn2$results$MAE[27],
maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
modelLookup(model = "brnn")
solar_TuneGrid <- expand.grid(neurons = 1:7)
solar_brnn <- train(kWh_m2 ~ ., data = solarRescale, method = "neuralnet",
tuneGrid = solar_TuneGrid)
solar_TuneGrid
solar_brnn <- train(kWh_m2 ~ ., data = solarRescale, method = "brnn",
tuneGrid = solar_TuneGrid)
solar_brnn
solar_brnn <- train(kWh_m2 ~ ., data = solarRescale, method = "brnn",
tuneGrid = solar_TuneGrid, verbose = FALSE)
solar_brnn <- train(kWh_m2 ~ ., data = solarRescale, method = "brnn",
tuneGrid = solar_TuneGrid, trControl = trainControl(verboseIter = FALSE))
solar_brnn <- train(kWh_m2 ~ ., data = solarRescale, method = "brnn",
tuneGrid = solar_TuneGrid, trControl = trainControl(verboseIter = FALSE), verbose = FALSE)
solar_brnn$bestTune
solar_brnn$results[1,]
unscale(x = solar_brnn$results$MAE[1],
maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
modelLookup("monmlp")
solar_TuneGrid <- expand.grid(hidden1 = 1:7, n.ensemble = 1:3)
solar_monmlp <- train(kWh_m2 ~ ., data = solarRescale, method = "monmlp",
tuneGrid = solar_TuneGrid,
# tried to mute output with verbose = FALSE but no luck with brnn
trControl = trainControl(verboseIter = FALSE), verbose = FALSE)
solar_TuneGrid
solar_TuneGrid <- expand.grid(hidden1 = 1:7, n.ensemble = 1)
solar_monmlp <- train(kWh_m2 ~ ., data = solarRescale, method = "monmlp",
tuneGrid = solar_TuneGrid)
solar_monmlp <- train(kWh_m2 ~ ., data = solarRescale, method = "monmlp")
solar_monmlp <- train(kWh_m2 ~ ., data = solarRescale, method = "monmlp")
solar_monmlp
solar_monmlp$bestTune
solar_monmlp$results[1,]
unscale(x = solar_monmlp$results$MAE[1],
maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
# summarize variables by day with means, minima, maxima, and sd
solarDay <- solar |>
group_by(Date = date(DateTime)) |>
summarise(kWh_m2 = sum(Radiation * 60 * 5) * 2.77778e-7,
avgTemperature = mean(Temperature),
minTemperature = min(Temperature),
maxTemperature = max(Temperature),
sdTemperature = sd(Temperature),
rangeTemperature = maxTemperature - minTemperature,
avgPressure = mean(Pressure),
minPressure = min(Pressure),
maxPressure = max(Pressure),
sdPressure = sd(Pressure),
rangeTemperature = maxPressure - minPressure,
avgHumidity = mean(Humidity),
minHumidity = min(Humidity),
maxHumidity = max(Humidity),
sdPHumidity = sd(Humidity),
rangeHumidity = maxHumidity - minHumidity,
avgSpeed = mean(Speed),
minSpeed = min(Speed),
maxSpeed = max(Speed),
sdPSpeed = sd(Speed),
rangeSpeed = maxSpeed - minSpeed,
dayLengthHrs = as.numeric(((max(TimeSunSet) -
min(TimeSunRise)) / 60 / 60)))
head(solarDay)
solarRescale <- solarDay |>
select(-Date) |>
mutate(across(everything(), rescale))
solarRescale
?predict
solarRescale[,-1]
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred
solar_pred <- unscale(predict(solar_brnn, solarRescale[,-1]))
solar_pred <- unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
solar_pred
solar_obs
solar_obs <- solarDay[,1:2]
solar_obs
solar_brnn1 <- solar_brnn <- train(kWh_m2 ~ ., data = solarRescale,
method = "brnn", neurons = 1)
solar_brnn1 <- train(kWh_m2 ~ ., data = solarRescale,
method = "brnn", neurons = 1)
solarRescale
solar_brnn1 <- train(kWh_m2 ~ ., data = solarRescale, method = "brnn", neurons = 1)
solar_brnn1 <- train(kWh_m2 ~ ., data = solarRescale, method = "brnn")
solar_brnn1
solar_brnn1$pred
solar_brnn1$finalModel
solar_obs <- solarDay[,1:2]
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred <- unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2))
solar_pred
solar_obs
solar_pred <- data.frame(preds = unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2)),
Date = solar_obs[,1])
solar_pred
solar_pred <- tibble(data.frame(preds = unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2)),
Date = solar_obs[,1]))
solar_pred <- tibble(data.frame(preds = unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2)),
Date = solar_obs[,1]))
solar_pred <- data.frame(preds = unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2)),
Date = solar_obs[,1])
solar_obs <- solarDay[,1:2]
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred <- data.frame(preds = unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2)),
Date = solar_obs[,1])
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred <- tibble(data.frame(preds = unscale(solar_pred, maxim = max(solarDay$kWh_m2), minim = min(solarDay$kWh_m2)),
Date = solar_obs[,1]))
solar_pred
solar_obs <- solarDay[,1:2]
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred <- tibble(data.frame(Date = solar_obs[,1]),
preds = unscale(solar_pred,
maxim = max(solarDay$kWh_m2),
minim = min(solarDay$kWh_m2))))
solar_pred <- tibble(data.frame(Date = solar_obs[,1]),
preds = unscale(solar_pred,
maxim = max(solarDay$kWh_m2),
minim = min(solarDay$kWh_m2)))
solar_pred
solar_obs
p1 <- ggplot() +
geom_point(data = solar_obs, aes(x = Date, y = kWh_m2), color = "coral2")
p1
p1 <- ggplot() +
geom_point(data = solar_obs, aes(x = Date, y = kWh_m2), color = "coral2") +
geom_point(data = solar_pred, aes(x = Date, y = preds), color = "lightgreen")
p1
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date"))
solar_pred_long
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(preds, kWh_m2)
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(preds)
solar_pred_long
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(c(preds, kWh_m2))
solar_pred_long
p1 <- ggplot() +
geom_point(data = solar_obs, aes(x = Date, y = kWh_m2), color = "coral2") +
geom_point(data = solar_pred, aes(x = Date, y = preds), color = "lightgreen") +
geom_path(data = solar_pred_long, aes(x = date, y = value, group = Date))
p1
p1 <- ggplot() +
geom_point(data = solar_obs, aes(x = Date, y = kWh_m2), color = "coral2") +
geom_point(data = solar_pred, aes(x = Date, y = preds), color = "lightgreen") +
geom_path(data = solar_pred_long, aes(x = Date, y = value, group = Date))
p1
solarDay
solar_obs <- solarDay |>
pivot_longer(cols = -Date)
solar_obs
solarDay
solar_obs <- solarDay |>
select(kWh_m2, avgTemperature, avgPressure, avgHumidity, avgSpeed) |>
pivot_longer(cols = -Date)
solar_obs <- solarDay |>
select(Date, kWh_m2, avgTemperature,
avgPressure, avgHumidity, avgSpeed) |>
pivot_longer(cols = -Date)
solar_obs <- solarDay |>
select(Date, kWh_m2, avgTemperature,
avgPressure, avgHumidity, avgSpeed) |>
pivot_longer(cols = -Date)
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred <- tibble(data.frame(Date = solar_obs[,1]),
preds = unscale(solar_pred,
maxim = max(solarDay$kWh_m2),
minim = min(solarDay$kWh_m2)))
solar_pred
solar_obs
solar_pred <- tibble(data.frame(Date = solarDay$Date),
preds = unscale(solar_pred,
maxim = max(solarDay$kWh_m2),
minim = min(solarDay$kWh_m2)))
solar_pred
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date"))
solar_pred_long
solar_obs <- solarDay |>
select(Date, kWh_m2, avgTemperature,
avgPressure, avgHumidity, avgSpeed) |>
pivot_longer(cols = -c(Date, kWh_m2))
solar_obs
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date"))
solar_pred_long
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(cols = c(preds, kWh_m2))
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(cols = c(preds, kWh_m2), names_to = "obs_pred", values_to = "value2")
solar_pred_long
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(cols = c(preds, kWh_m2),
names_to = "obs_pred", values_to = "kWh")
solar_obs <- solarDay |>
select(Date, kWh_m2, avgTemperature,
avgPressure, avgHumidity, avgSpeed) |>
rename("obs" = "kWh_m2")
solar_obs <- solarDay |>
select(Date, kWh_m2, avgTemperature,
avgPressure, avgHumidity, avgSpeed) |>
rename("obs" = "kWh_m2") |>
pivot_longer(cols = -c(Date, kWh_m2))
solar_obs <- solarDay |>
select(Date, kWh_m2, avgTemperature,
avgPressure, avgHumidity, avgSpeed) |>
rename("obs" = "kWh_m2") |>
pivot_longer(cols = -c(Date, obs))
solar_obs
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred <- tibble(data.frame(Date = solarDay$Date),
preds = unscale(solar_pred,
maxim = max(solarDay$kWh_m2),
minim = min(solarDay$kWh_m2)))
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(cols = c(preds, obs),
names_to = "obs_pred", values_to = "kWh_m2")
solar_pred_long
solar_pred <- predict(solar_brnn, solarRescale[,-1])
solar_pred <- tibble(data.frame(Date = solarDay$Date),
pred = unscale(solar_pred,
maxim = max(solarDay$kWh_m2),
minim = min(solarDay$kWh_m2)))
solar_pred_long <- solar_pred |>
inner_join(solar_obs, by = join_by("Date")) |>
pivot_longer(cols = c(pred, obs),
names_to = "obs_pred", values_to = "kWh_m2")
solar_pred_long
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date)) +
facet_wrap(~name)
p1
?facet_wrap
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date)) +
facet_wrap(~name, scales = "free")
p1
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date)) +
facet_wrap(~name, scales = "free", ncol = 1)
p1
?geom_path
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date),arrow = arrow(ends = "last")) +
facet_wrap(~name, scales = "free", ncol = 1)
p1
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date),arrow = arrow(ends = "last", length = unit(10, "px"))) +
facet_wrap(~name, scales = "free", ncol = 1)
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date),arrow = arrow(ends = "last", length = unit(0.1, "inches"))) +
facet_wrap(~name, scales = "free", ncol = 1)
p1
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date),arrow = arrow(ends = "first", length = unit(0.1, "inches"))) +
facet_wrap(~name, scales = "free", ncol = 1)
p1
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date),arrow = arrow(ends = "first", length = unit(0.05, "inches"))) +
facet_wrap(~name, scales = "free", ncol = 1)
p1
p1 <- ggplot(data = solar_pred_long) +
geom_point(aes(x = value, y = kWh_m2, color = obs_pred)) +
geom_path(aes(x = value, y = kWh_m2, group = Date),arrow = arrow(ends = "first", length = unit(0.075, "inches"))) +
facet_wrap(~name, scales = "free", ncol = 1)
p1
