install.packages("caret")
library(caret)
library(palmerpenguins)
data("penguins")
penguins
penguins_raw
penguins
n <- nrow(na.omit(penguins))
?na.omit
n <- nrow(drop_na(penguins))
penguins |> drop_na()
??drop_na
library(tidyverse)
n <- nrow(drop_na(penguins))
drop_na(penguins)
penguins
penguins |>
penguins |>
drop_na()
penguins <- penguins |>
drop_na()
n <- nrow(penguins)
testRows <- sample(1:n, size = n * 1/3)
testRows <- sample(1:n, size = n * 1/3, replace = FALSE)
set.seed(314)
penguins <- penguins |>
drop_na()
n <- nrow(penguins)
testRows <- sample(1:n, size = n * 1/3, replace = FALSE)
penguins$test <- FALSE
penguins$test[testRows] <- TRUE
penguins
table(penguins$test)
data("penguins")
head(penguins)
penguin_dat <- penguins |>
select(species, bill_length_mm, body_mass_g) |>
drop_na()
penguin_dat
penguins_trim <- penguins |>
select(species, bill_length_mm, body_mass_g) |>
drop_na()
penguins <- penguins |>
select(species, bill_length_mm, body_mass_g) |>
drop_na()
penguins
data("penguins")
peng_data <- penguins |>
select(species, bill_length_mm, body_mass_g) |>
drop_na()
set.seed(314)
peng_data <- penguins |>
select(species, bill_length_mm, body_mass_g) |>
drop_na()
n <- nrow(peng_data)
testRows <- sample(1:n, size = n * 1/3, replace = FALSE)
peng_data$test <- FALSE
peng_data$test[testRows] <- TRUE
head(peng_data)
table(peng_data$test)
p1 <- ggplot(data = peng_data) +
geom_point(aes(x = bill_length_mm, y = body_mass_g, color = test))
p1
p1 <- ggplot(data = peng_data) +
geom_point(aes(x = bill_length_mm, y = body_mass_g,
color = species, shape = test))
p1
p1 <- ggplot(data = peng_data) +
geom_point(aes(x = bill_length_mm, y = body_mass_g,
color = species, shape = test, size = test))
p1
p1 <- ggplot(data = peng_data) +
geom_point(aes(x = bill_length_mm, y = body_mass_g,
color = species, shape = test))
p1
train_data <- peng_data[peng_data$test,]
test_data <- peng_data[peng_data$test,]
train_data <- peng_data[-peng_data$test,]
train_data
train_data <- peng_data[-peng_data$test,]
peng_data
train_data <- peng_data[!peng_data$test,]
train_data
lm1 <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
summary(lm1)
test_data$yhat <- predict(lm1, newdata = test_data)
test_data
rsq <- cor(test_data$yhat, test_data$body_mass_g)^2
mae <- mean(abs(test_data$yhat - test_data$body_mass_g))
rmse <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
rsq <- cor(test_data$yhat, test_data$body_mass_g)^2
rmse <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
mae <- mean(abs(test_data$yhat - test_data$body_mass_g))
rsq
rmse
mae
summary(lm1)
k <- 10
peng_kfold <- matrix(nrow = k, ncol = 3)
peng_data$fold <- cut(seq(1, n), breaks = k)
peng_data
peng_data$fold <- cut(seq(1, n), breaks = k, labels = FALSE)
peng_data
unique(peng_data$fold)
i
i = 1
filter(peng_data, fold != i)
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
loop_lm
peng_data
penguins
colnames(peng_kfold) <- c("r2", "rmse", "mae")
peng_kfold
# set number of folds k
k <- 10
# pull number of observations n
n <- nrow(peng_data)
# assign datapoints fold groups
peng_data$fold <- cut(seq(1, n), breaks = k, labels = FALSE)
# create empty matrix for loop output
peng_kfold <- matrix(nrow = k, ncol = 3)
colnames(peng_kfold) <- c("r2", "rmse", "mae")
for(i in 1:k) {
# filter test and train datasets
test_data <- filter(peng_data, fold == i)
train_data <- filter(peng_data, fold != i)
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
# predict yhat values for test dataset
test_data$yhat <- predict(loop_lm, newdata = test_data)
# R^2
peng_kfold$r2[i] <- cor(test_data$yhat, test_data$body_mass_g)^2
# RMSE
peng_kfold$rmse[i] <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
# MAE
peng_kfold$mae[i] <- mean(abs(test_data$yhat - test_data$body_mass_g))
}
# set number of folds k
k <- 10
# pull number of observations n
n <- nrow(peng_data)
# assign datapoints fold groups
peng_data$fold <- cut(seq(1, n), breaks = k, labels = FALSE)
# create empty matrix for loop output
peng_kfold <- matrix(nrow = k, ncol = 3)
colnames(peng_kfold) <- c("r2", "rmse", "mae")
for(i in 1:k) {
# filter test and train datasets
test_data <- filter(peng_data, fold == i)
train_data <- filter(peng_data, fold != i)
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
# predict yhat values for test dataset
test_data$yhat <- predict(loop_lm, newdata = test_data)
# R^2
peng_kfold[i,1] <- cor(test_data$yhat, test_data$body_mass_g)^2
# RMSE
peng_kfold[i,2] <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
# MAE
peng_kfold[i,3] <- mean(abs(test_data$yhat - test_data$body_mass_g))
}
peng_kfold
test_data
train_data
test_data
# set number of folds k
k <- 10
# pull number of observations n
n <- nrow(peng_data)
# assign datapoints fold groups
peng_data$fold <- cut(seq(1, n), breaks = k, labels = FALSE)
# create empty matrix for loop output
peng_kfold <- matrix(nrow = k, ncol = 3)
colnames(peng_kfold) <- c("r2", "rmse", "mae")
for(i in 1:k) {
# filter test and train datasets
train_data <- filter(peng_data, fold != i)
test_data <- filter(peng_data, fold == i)
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
# predict yhat values for test dataset
test_data$yhat <- predict(loop_lm, newdata = test_data)
# R^2
peng_kfold[i,1] <- cor(test_data$yhat, test_data$body_mass_g)^2
# RMSE
peng_kfold[i,2] <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
# MAE
peng_kfold[i,3] <- mean(abs(test_data$yhat - test_data$body_mass_g))
}
peng_kfold
train_data
test_data
mean_r2 <- mean(peng_kfold$r2)
mean_r2 <- mean(peng_kfold[,1])
sd_r2 <- sd(peng_kfold[,1])
sd_r2
mean_r2
peng_data
peng_data[,1:3][sample(n)]
# reshuffle penguin data for assigning folds
peng_data2 <- peng_data[,1:3]
peng_data2
sample(n)
unique(sample(n))
# set seed for replication
set.seed(314)
# set number of folds k
k <- 10
# pull number of observations n
n <- nrow(peng_data)
# reshuffle penguin data for assigning folds
peng_data2 <- peng_data[sample(n),1:3]
peng_data2
# set seed for replication
set.seed(314)
# set number of folds k
k <- 10
# pull number of observations n
n <- nrow(peng_data)
# reshuffle penguin data for assigning folds
peng_data2 <- peng_data[sample(n),1:3]
# assign datapoints fold groups
peng_data2$fold <- cut(seq(1, n), breaks = k, labels = FALSE)
# create empty matrix for loop output
peng_kfold <- matrix(nrow = k, ncol = 3)
colnames(peng_kfold) <- c("r2", "rmse", "mae")
for(i in 1:k) {
# filter test and train datasets
train_data <- filter(peng_data2, fold != i)
test_data <- filter(peng_data2, fold == i)
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
# predict yhat values for test dataset
test_data$yhat <- predict(loop_lm, newdata = test_data)
# R^2
peng_kfold[i,1] <- cor(test_data$yhat, test_data$body_mass_g)^2
# RMSE
peng_kfold[i,2] <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
# MAE
peng_kfold[i,3] <- mean(abs(test_data$yhat - test_data$body_mass_g))
}
peng_kfold
mean_r2 <- mean(peng_kfold[,1])
mean_r2
mean_rmse <- mean(peng_kfold[,2])
mean_r2 <- mean(peng_kfold[,1])
sd_r2 <- sd(peng_kfold[,1])
mean_rmse <- mean(peng_kfold[,2])
sd_rmse <- sd(peng_kfold[,2])
mean_mae <- mean(peng_kfold[,3])
sd_mae <- sd(peng_kfold[,3])
mean_rmse
mean_mae
sd_mae
sd_rmse
sd_r2
mean_r2
sd_r2
peng_kfold
mean_rmse
sd_rmse
mean_mae
sd_mae
i
peng_data[!i,]
peng_data[-i,]
test_data <- peng_data[i,]
test_data
# filter test and train datasets
train_data <- peng_data[-i,1:3]
test_data <- peng_data[i,1:3]
train_data
test_data
# set seed for replication
set.seed(314)
# pull number of observations n
n <- nrow(peng_data)
# create empty matrix for loop output
peng_LOOCV <- matrix(nrow = n, ncol = 3)
colnames(peng_LOOCV) <- c("r2", "rmse", "mae")
for(i in 1:n) {
# filter test and train datasets
train_data <- peng_data[-i,1:3]
test_data <- peng_data[i,1:3]
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
# predict yhat values for test dataset
test_data$yhat <- predict(loop_lm, newdata = test_data)
# R^2
peng_LOOCV[i,1] <- cor(test_data$yhat, test_data$body_mass_g)^2
# RMSE
peng_LOOCV[i,2] <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
# MAE
peng_LOOCV[i,3] <- mean(abs(test_data$yhat - test_data$body_mass_g))
}
peng_LOOCV
cor(test_data$yhat, test_data$body_mass_g)^2
test_data$yhat
test_data$body_mass_g
cor(test_data$yhat, test_data$body_mass_g)
?cor
# mean R^2
mean_r2 <- mean(peng_kfold[,1])
# R^2 standard error
se_r2 <- sd(peng_kfold[,1]) / sqrt(k)
# mean Root Mean Square Error
mean_rmse <- mean(peng_kfold[,2])
# RMSE standard error
se_rmse <- sd(peng_kfold[,2]) / sqrt(k)
# mean Mean Absolute Error
mean_mae <- mean(peng_kfold[,3])
# MAE standard error
se_mae <- sd(peng_kfold[,3]) / sqrt(k)
se_r2
se_rmse
se_mae
# create empty matrix for loop output
peng_LOOCV <- matrix(nrow = n, ncol = 2)
colnames(peng_LOOCV) <- c("y", "yhat")
test_data
# create empty matrix for loop output
peng_LOOCV <- matrix(nrow = n, ncol = 2)
colnames(peng_LOOCV) <- c("y", "yhat")
for(i in 1:n) {
# filter test and train datasets
train_data <- peng_data[-i,1:3]
test_data <- peng_data[i,1:3]
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
peng_LOOCV[i,1] <- test_data[,3]
# predict yhat values for test dataset
peng_LOOCV[i,2] <- predict(loop_lm, newdata = test_data)
}
peng_LOOCV
# create empty matrix for loop output
peng_LOOCV <- matrix(nrow = n, ncol = 2)
peng_LOOCV
n
i
peng_data[-i,1:3]
# filter test and train datasets
train_data <- peng_data[-i,1:3]
test_data <- peng_data[i,1:3]
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
peng_LOOCV[i,1] <- test_data[,3]
# predict yhat values for test dataset
peng_LOOCV[i,2] <- predict(loop_lm, newdata = test_data)
predict(loop_lm, newdata = test_data)
# predict yhat values for test dataset
loop_yhat <- predict(loop_lm, newdata = test_data)
peng_LOOCV[i,2] <- loop_yhat
loop_yhat
peng_LOOCV[i,2] <- loop_yhat[1]
peng_LOOCV[i,2] <- loop_yhat[1,1]
loop_yhat[1,1]
loop_yhat[1]
peng_LOOCV[i,2] <- loop_yhat[1]
peng_LOOCV[i,2]
peng_LOOCV
test_data[,3]
peng_data
peng_LOOCV[,1] <- peng_data[,3]
# create empty matrix for loop output
peng_LOOCV <- matrix(nrow = n, ncol = 2)
colnames(peng_LOOCV) <- c("y", "yhat")
peng_LOOCV[,1] <- peng_data[,3]
peng_LOOCV
peng_LOOCV
# create empty matrix for loop output
peng_LOOCV <- matrix(nrow = n, ncol = 2)
colnames(peng_LOOCV) <- c("y", "yhat")
peng_LOOCV
peng_data[,3]
peng_LOOCV[i,1] <- as.numeric(test_data[,3])
for(i in 1:n) {
# filter test and train datasets
train_data <- peng_data[-i,1:3]
test_data <- peng_data[i,1:3]
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
peng_LOOCV[i,1] <- as.numeric(test_data[,3])
# predict yhat values for test dataset
loop_yhat <- predict(loop_lm, newdata = test_data)
peng_LOOCV[i,2] <- loop_yhat[1]
}
peng_LOOCV
# set seed for replication
set.seed(314)
# pull number of observations n
n <- nrow(peng_data)
# create empty matrix for loop output
peng_LOOCV <- matrix(nrow = n, ncol = 2)
colnames(peng_LOOCV) <- c("y", "yhat")
for(i in 1:n) {
# filter test and train datasets
train_data <- peng_data[-i,1:3]
test_data <- peng_data[i,1:3]
# build linear model on train dataset
loop_lm <- lm(body_mass_g ~ bill_length_mm + species, data = train_data)
peng_LOOCV[i,1] <- as.numeric(test_data[,3])
# predict yhat values for test dataset
loop_yhat <- predict(loop_lm, newdata = test_data)
peng_LOOCV[i,2] <- loop_yhat[1]
}
peng_LOOCV
# R^2
peng_LOOCV[i,1] <- cor(test_data$yhat, test_data$body_mass_g)^2
# R^2
LOOCV_r2 <- cor(peng_LOOCV$y, peng_LOOCV$yhat)^2
# RMSE
LOOCV_rmse[i,2] <- sqrt(mean((test_data$yhat - test_data$body_mass_g)^2))
peng_LOOCV
# R^2
LOOCV_r2 <- cor(peng_LOOCV$y, peng_LOOCV$yhat)^2
# R^2
LOOCV_r2 <- cor(peng_LOOCV[,1], peng_LOOCV[,2])^2
LOOCV_r2
# R^2
LOOCV_r2 <- cor(peng_LOOCV[,1], peng_LOOCV[,2])^2
# RMSE
LOOCV_rmse <- sqrt(mean((peng_LOOCV[,2] - peng_LOOCV[,1])^2))
# MAE
LOOCV_mae[i,3] <- mean(abs(test_data$yhat - test_data$body_mass_g))
# MAE
LOOCV_mae <- mean(abs(peng_LOOCV[,2] - peng_LOOCV[,1]))
LOOCV_mae
